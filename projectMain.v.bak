// Part 2 skeleton

module projectMain
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
        KEY,
		  HEX0,HEX3,HEX1,HEX4,HEX5,HEX6,HEX7,LEDR,
        SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input CLOCK_50;				//	50 MHz
	input [17:0] SW;
	input [3:0] KEY;
	output [17:0] LEDR;
	
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	reg [3:0] i=4'd1;
	output [6:0] HEX0;
	output [6:0] HEX3;
	output [6:0] HEX1;
	output [6:0] HEX4;
	output [6:0] HEX5;
	output [6:0] HEX6;
	output [6:0] HEX7;
	
	wire resetn;
	assign resetn = 1;
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	wire [2:0] colour;
	wire [8:0] x;
	wire [8:0] y;
	wire writeEn;
	
	// this is what I am adding
	//assign colour = SW[17:15];
	wire draw;
	assign draw = ~KEY[1];
	wire ld_x, ld_y, ld_c;
	
	
	

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(~SW[0]),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
			
			
			
		defparam VGA.RESOLUTION = "320x240";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "board.mif";
			

	
	reg [6:0] position_P1=7'd0;
	reg [6:0] pre_position_P1=7'd0;
	reg [6:0] position_P2=7'd0;
	reg [6:0] pre_position_P2=7'd0;
	wire [8:0] coordinate_x_P1;
	wire [8:0] pre_coordinate_x_P1;
	wire [8:0] coordinate_y_P1;
	wire [8:0] pre_coordinate_y_P1;
	wire [8:0] coordinate_x_P2;
	wire [8:0] pre_coordinate_x_P2;
	wire [8:0] coordinate_y_P2;
	wire [8:0] pre_coordinate_y_P2;
	
	task updatePosition;
		inout reg[6:0] position;
		begin
			case(position)
				//doing ladders
				//7'd1:position = 7'd38;
				7'd4:position = 7'd14;
			7'd8:position = 7'd30;
				7'd21:position = 7'd42;
				7'd28:position = 7'd76;
				7'd50:position = 7'd67;
				7'd71:position = 7'd92;
				7'd80:position = 7'd99;
				//doing snakes now
				7'd36:position = 7'd6;
				7'd32:position = 7'd10;
				7'd62:position = 7'd18;
				7'd48:position = 7'd26;
				7'd88:position = 7'd24;
				7'd95:position = 7'd56;
				7'd97:position = 7'd78;
			endcase
		end
	endtask
	reg [3:0] diceNumber;
	reg [3:0] lastDiceNumber;
	reg [3:0] winner;
	reg positionChanged=1'b0;
	

	always@(posedge KEY[0])//posedge SW[3]) //& ~positionChanged)//lastDiceNumber)//SW[3])//negedge KEY[3])
	begin
		if (~SW[0])
		begin
			pre_position_P1 = position_P1;
			pre_position_P2 = position_P2;
			position_P1=7'd0;
			position_P2=7'd0;
			i=4'd1;
			winner=4'd0;
			
		end
		else if(SW[0] && winner == 4'd0)
		begin
			if(i==4'd1)
			begin
				pre_position_P1 = position_P1;
				position_P1 = position_P1 + diceNumber;
				if(position_P1>7'd100)
				begin
					position_P1=position_P1 - diceNumber;
				end
				updatePosition(position_P1);
				if(diceNumber != 3'd6) // if dice number is not 6
				begin
					i = 4'd2;
				end
				if(position_P1==7'd100) //means player 1 won
				begin
				  winner <= 4'd1;
				  i = 4'd1;
				end
				positionChanged <= 1'b1;
			end
			else if(i==4'd2)
			begin
				pre_position_P2 = position_P2;
				position_P2 = position_P2 + diceNumber;
				if(position_P2>7'd100)
				begin
					position_P2=position_P2 - diceNumber;
				end
				updatePosition(position_P2);
				if(diceNumber != 3'd6)
				begin
					i = 4'd1;
				end
				if(position_P2==7'd100) //means player 2 won
				begin
				  winner <= 4'd2;
				  i = 4'd2;
				end
				positionChanged <= 1'b1;
			end
			
		end
	end
	
		// look up coordinates in the lut on clock
	lut_coordinates lookUpP1(.clock(CLOCK_50),.number(position_P1),.out_x(coordinate_x_P1),.out_y(coordinate_y_P1));
	lut_coordinates lookUpP2(.clock(CLOCK_50),.number(position_P2),.out_x(coordinate_x_P2),.out_y(coordinate_y_P2));
	
	// look up coordinates for previous positions
	lut_coordinates pre_lookUpP1(.clock(CLOCK_50),.number(pre_position_P1),.out_x(pre_coordinate_x_P1),.out_y(pre_coordinate_y_P1));
	lut_coordinates pre_lookUpP2(.clock(CLOCK_50),.number(pre_position_P2),.out_x(pre_coordinate_x_P2),.out_y(pre_coordinate_y_P2));
	wire isOddP1 = pre_position_P1[0];
	wire isOddP2 = pre_position_P2[0];
	
	
	// calling random num generator module
	
	//once the KEY[0] is pressed roll the dice and then store the value in diceNumber
	// I think in randomNumGernerator module in displayCounter module it should be always @(posedge clock & posedge roll)
	randomNumGernerator rng(.clock(CLOCK_50),.rollTheDice(KEY[0]),.Clear_rollTheDice(~SW[8]),.diceNumber(diceNumber),.lastDiceNumber(lastDiceNumber),.winner(winner));
	reg [3:0] position_P1_BCD_Tens;
	reg [3:0] position_P2_BCD_Tens;
	reg [3:0] position_P1_BCD_Ones;
	reg [3:0] position_P2_BCD_Ones;
	
	BCD BCD_P1(.binary(position_P1),.Tens(position_P1_BCD_Tens),.Ones(position_P1_BCD_Ones));
	BCD BCD_P2(.binary(position_P2),.Tens(position_P2_BCD_Tens),.Ones(position_P2_BCD_Ones));
	
	HEX_seg HEX_0(.c0(diceNumber[0]),.c1(diceNumber[1]),.c2(diceNumber[2]),.c3(diceNumber[3]),.seg(HEX0));
	HEX_seg HEX_6(.c0(position_P1_BCD_Ones[0]),.c1(position_P1_BCD_Ones[1]),.c2(position_P1_BCD_Ones[2]),.c3(position_P1_BCD_Ones[3]),.seg(HEX6));
	HEX_seg HEX_7(.c0(position_P1_BCD_Tens[0]),.c1(position_P1_BCD_Tens[1]),.c2(position_P1_BCD_Tens[2]),.c3(position_P1_BCD_Tens[3]),.seg(HEX7));
	
	HEX_seg HEX_4(.c0(position_P2_BCD_Ones[0]),.c1(position_P2_BCD_Ones[1]),.c2(position_P2_BCD_Ones[2]),.c3(position_P2_BCD_Ones[3]),.seg(HEX4));
	HEX_seg HEX_5(.c0(position_P2_BCD_Tens[0]),.c1(position_P2_BCD_Tens[1]),.c2(position_P2_BCD_Tens[2]),.c3(position_P2_BCD_Tens[3]),.seg(HEX5));
	


	wire EnableDraw;
	RateDivider one(.rate('b01),.clock(CLOCK_50),.Clear_b(1'b1),.roll(1'b1), .Enable(EnableDraw));
	
	
	
	datapath datapathP1(
        .clk(EnableDraw),
        //.manualwriteEn(SW[15]),
		.x(x),
		.y(y),
		.writeEn(writeEn),
		.data_in_x({coordinate_x_P2,coordinate_x_P1}),
		.pre_data_in_x({pre_coordinate_x_P2,pre_coordinate_x_P1}),
		.data_in_y({coordinate_y_P2+9'd15,coordinate_y_P1}),
		.pre_data_in_y({pre_coordinate_y_P2+9'd15,pre_coordinate_y_P1}),
		.isOddP1(isOddP1),.isOddP2(isOddP2),
		.colour(colour),
		.color_in(3'b011)
    );
	
	
	led_blinking ShowingWinner(CLOCK_50,winner,LEDR[0],LEDR[1],LEDR[2],LEDR[3],LEDR[4],
		LEDR[5],LEDR[6],LEDR[7],LEDR[8],LEDR[9],LEDR[10],LEDR[11],LEDR[12],LEDR[13],
		LEDR[14],LEDR[15],LEDR[16],LEDR[17],);

	
	
	//HEX3 shows whose turn is it
	HEX_seg HEX_3(.c0(i[0]),.c1(i[1]),.c2(i[2]),.c3(i[3]),.seg(HEX3));
	
	// HEX5 shows the winner
	HEX_seg HEX_1(.c0(winner[0]),.c1(winner[1]),.c2(winner[2]),.c3(winner[3]),.seg(HEX1));
	
endmodule

module datapath(
    input clk,
    input [17:0] data_in_x,
    input [17:0] pre_data_in_x,
    input [17:0] data_in_y,
    input [17:0] pre_data_in_y,
    input [2:0] color_in,
	input isOddP1, input isOddP2,
	//input manualwriteEn,
    output reg [2:0] colour,
	output reg writeEn,
	output reg [8:0] x,
	output reg [8:0] y
    );
    
	reg y_enable;
	reg isP2;
	reg [8:0] x_pos;
	reg [8:0] pre_x_pos;
	reg [8:0] x_posP2;
	reg [8:0] pre_x_posP2;
	reg [8:0] y_pos;
	reg [8:0] pre_y_pos;
	reg [8:0] y_posP2;
	reg [8:0] pre_y_posP2;
	reg [2:0] x_counter = 2'b00, y_counter  = 2'b00;
	reg [2:0] pre_x_counter = 2'b00, pre_y_counter  = 2'b00;
	reg [2:0] countingForChangingCurrentTOPre = 3'b000;
    // Registers x, y
    always@(posedge clk) begin
		//writeEn = manualwriteEn;
		writeEn = 1;
		if(countingForChangingCurrentTOPre == 2'b10 || countingForChangingCurrentTOPre == 2'b11)begin
			x_pos <= data_in_x[8:0];
				pre_x_pos <= pre_data_in_x[8:0];
				y_pos <= data_in_y[8:0];
				pre_y_pos <= pre_data_in_y[8:0];
				x_posP2 <= data_in_x[17:9];
				pre_x_posP2 <= pre_data_in_x[17:9];
				y_posP2 <= data_in_y[17:9];
				pre_y_posP2 <= pre_data_in_y[17:9];
			// counter to draw 3x3 pixel
			if (x_counter == 2'b11)
				x_counter <= 2'b00;
			else
				x_counter <= x_counter + 1'b1;
			
			y_enable = (x_counter == 2'b11) ? 1 : 0;
			
			if (y_enable) begin
				if (y_counter == 2'b11)
					y_counter <= 2'b00;
				else 
					y_counter <= y_counter + 1'b1;
			end
			
			x = (isP2==0) ? (x_pos + x_counter) : (x_posP2 + x_counter);
			y = (isP2==0) ? (y_pos + y_counter) : (y_posP2 + y_counter);
			colour = (isP2==0) ? (3'b001) : (3'b011);
			isP2 = (x_counter == 2'b11 && y_counter == 2'b11) ? ~isP2 : isP2;
			if(x_counter == 2'b11 && y_counter == 2'b11) begin
				countingForChangingCurrentTOPre = countingForChangingCurrentTOPre + 1'b1;
				if(countingForChangingCurrentTOPre == 3'b100)
					countingForChangingCurrentTOPre = 2'b00;
			end
		end
		else if(countingForChangingCurrentTOPre == 2'b00 || countingForChangingCurrentTOPre == 2'b01)begin
			x_pos <= data_in_x[8:0];
				pre_x_pos <= pre_data_in_x[8:0];
				y_pos <= data_in_y[8:0];
				pre_y_pos <= pre_data_in_y[8:0];
				x_posP2 <= data_in_x[17:9];
				pre_x_posP2 <= pre_data_in_x[17:9];
				y_posP2 <= data_in_y[17:9];
				pre_y_posP2 <= pre_data_in_y[17:9];
			// counter to draw 3x3 pixel
			if (x_counter == 2'b11)
				x_counter <= 2'b00;
			else
				x_counter <= x_counter + 1'b1;
			
			y_enable = (x_counter == 2'b11) ? 1 : 0;
			
			if (y_enable) begin
				if (y_counter == 2'b11)
					y_counter <= 2'b00;
				else 
					y_counter <= y_counter + 1'b1;
			end
			
			x = (isP2==0) ? (pre_x_pos + x_counter) : (pre_x_posP2 + x_counter);
			y = (isP2==0) ? (pre_y_pos + y_counter) : (pre_y_posP2 + y_counter);
			colour = (isP2==0) ? (isOddP1 ? 3'b100 : 3'b111) : (isOddP2 ? 3'b100 : 3'b111);
			isP2 = (x_counter == 2'b11 && y_counter == 2'b11) ? ~isP2 : isP2;
			if(x_counter == 2'b11 && y_counter == 2'b11) begin
				countingForChangingCurrentTOPre = countingForChangingCurrentTOPre + 1'b1;
				if(countingForChangingCurrentTOPre == 3'b100)
					countingForChangingCurrentTOPre = 2'b00;
			end
		end
	end
	
endmodule